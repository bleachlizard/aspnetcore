<Project>

  <Target Name="_ResolveBlazorGeneratedAssets" DependsOnTargets="PrepareBlazorOutputs">
    <ItemGroup>
      <StaticWebAsset Include="@(BlazorOutputWithTargetPath->'$(TargetDir)%(TargetOutputPath)')" RemoveMetadata="TargetOutputPath">
        <SourceType></SourceType>
        <SourceId>$(PackageId)</SourceId>
        <ContentRoot>$([MSBuild]::NormalizeDirectory('$(TargetDir)dist\'))</ContentRoot>
        <BasePath>$(StaticWebAssetBasePath)</BasePath>
        <RelativePath>$([System.String]::Copy('%(BlazorOutputWithTargetPath.TargetOutputPath)').Replace('dist\','').Replace('\','/'))</RelativePath>
      </StaticWebAsset>

      <!-- We are dependingo on a "private" property for static web assets, but this is something we can clean-up in a later release.
           These files are not "external" in the "traditional" sense but it is fine for now as this is an implementation detail.
           We only need to do this for the standalone case, for hosted scenarios this works just fine as the assets are considered
           external. -->
      <_ExternalStaticWebAsset Include="@(BlazorOutputWithTargetPath->'$(TargetDir)%(TargetOutputPath)')">
        <SourceId>$(PackageId)</SourceId>
        <!-- We just do this to keep the existing implementation happy. We will update this in the next release. -->
        <SourceType>Generated</SourceType>
        <ContentRoot>$([MSBuild]::NormalizeDirectory('$(TargetDir)dist\'))</ContentRoot>
        <BasePath>$(StaticWebAssetBasePath)</BasePath>
      </_ExternalStaticWebAsset>

      <!-- These items we are adding for forward-compatibility with newer SDK versions. The paths listed here will be added unconditionally
           to the generated static web assets manifest. This is only needed for forward compatibility in Blazor standalone scenarios. -->
      <StaticWebAssetsManifestPath Include="$([MSBuild]::NormalizeDirectory('$(TargetDir)dist\'))">
        <SourceId>$(PackageId)</SourceId>
        <BasePath>$(StaticWebAssetBasePath)</BasePath>
      </StaticWebAssetsManifestPath>
    </ItemGroup>

  </Target>

  <Target Name="_ApplyLinkPreferencesToStaticWebAssets">
    <ItemGroup>
      <_ContentWithWwrootLinkAttribute Include="@(Content)" Condition="'%(Content.Link)' != '' and $([System.String]::Copy('%(Content.Link)').Replace('\','/').StartsWith('wwwroot/'))" />

      <_ContentLinkedIntoWwwroot
        Include="@(_ContentWithWwrootLinkAttribute)"
        Condition="'%(CopyToPublishDirectory)' != 'false'">
        <!-- This gets rid of wwwroot\ -->
        <RelativePath>$([System.String]::Copy('%(Link)').Substring(8))</RelativePath>
      </_ContentLinkedIntoWwwroot>

      <_OutsideContentLinkedIntoWwwroot Include="@(_ContentLinkedIntoWwwroot->'%(FullPath)')" Condition="!$([System.String]::Copy('%(Identity)').Replace('\','/').StartsWith('wwwroot/'))" />
      <_WwwrootLinkedContent Include="@(_ContentLinkedIntoWwwroot->'%(FullPath)')" Condition="$([System.String]::Copy('%(Identity)').Replace('\','/').StartsWith('wwwroot/'))" KeepMetadata="RelativePath" />

      <!-- For content items with the Link attribute on them, we update the relative path. This enables support at publish time for these assets but forgoes any
           dev-time support. (If you want to have dev-time support, you need to add an appropriate file into the wwwroot folder with CopyToPublishDirectory="false")
      -->
      <_NonLinkedStaticWebAssets Include="@(StaticWebAsset)" Exclude="@(_WwwrootLinkedContent)" />
      <_LinkedStaticWebAssets Include="@(StaticWebAsset)" Exclude="@(_NonLinkedStaticWebAssets)" />

      <_UpdatedStaticWebAssets Include="%(Identity)">
        <SourceType>@(_LinkedStaticWebAssets->'%(SourceType)')</SourceType>
        <SourceId>@(_LinkedStaticWebAssets->'%(SourceId)')</SourceId>
        <ContentRoot>@(_LinkedStaticWebAssets->'%(ContentRoot)')</ContentRoot>
        <BasePath>@(_LinkedStaticWebAssets->'%(BasePath)')</BasePath>
        <RelativePath>@(_WwwrootLinkedContent->'%(RelativePath)')</RelativePath>
      </_UpdatedStaticWebAssets>

      <StaticWebAsset Remove="@(_UpdatedStaticWebAssets)" />
      <StaticWebAsset Include="@(_UpdatedStaticWebAssets)" />

      <!-- This allows limited publish time support for content items that are outside the wwwroot folder but are linked into the wwwroot folder. For example:
          * Imagine a set of items in <ProjectDir>/Client/publish that are linked into <ProjectDir>/wwwroot/.
          * We will consider them static web assets and default their content root to `<ProjectDir>/wwwroot` and their relative path will be whatever is after wwwroot\
          * We don't guarantee that these assets can be resolved at development time.
          * We do guarantee that we will copy them into the actual wwwroot folder at publish time.
          * If you want this type of dev-time support, the recomendation is to add the list of assets to the item group manually indicating a suitable content root.
      -->
      <StaticWebAsset Include="@(_OutsideContentLinkedIntoWwwroot)">
        <SourceType></SourceType>
        <SourceId>$(PackageId)</SourceId>
        <!-- We don't try to come up with a separate content root to make the inner loop work.
            You can add items with CopyToPublishDirectory=false for development time support or add the assets directly by pasing in the parameters
        -->
        <ContentRoot>$([MSBuild]::NormalizeDirectory('$(MSBuildProjectDirectory)\wwwroot\'))</ContentRoot>
        <BasePath>$(StaticWebAssetBasePath)</BasePath>
        <RelativePath>%(_OutsideContentLinkedIntoWwwroot.RelativePath)</RelativePath>
      </StaticWebAsset>

      <_StaticWebAssetsPublishFalse Include="@(Content->'%(FullPath)')" Condition="'%(Content.CopyToPublishDirectory)' == 'false'" />
      <_StaticWebAssetsLinkOutsideWwwroot Include="@(Content->'%(FullPath)')" Condition="'%(Content.Link)' != '' and !$([System.String]::Copy('%(Content.Link)').Replace('\','/').StartsWith('wwwroot/'))" />

      <!-- Remove files that wouldn't be copied to the publish folder or that would be copied outside of the wwwroot folder if they were ever considered static web assets -->
      <StaticWebAsset Remove="@(_StaticWebAssetsPublishFalse)" />
      <StaticWebAsset Remove="@(_StaticWebAssetsLinkOutsideWwwroot)" />
    </ItemGroup>

  </Target>

  <Target Name="BlazorStaticWebAssetsComputeFilesToPublish"
    AfterTargets="_StaticWebAssetsComputeFilesToPublish">

    <ItemGroup>
      <!-- We need to update the external static web assets to follow the blazor publish output convention that puts them inside $(TargetName)/dist instead of wwwroot -->
      <_StandaloneExternalPublishStaticWebAsset Include="@(_ExternalPublishStaticWebAsset)" Condition="'%(RelativePath)' != '' and '$([System.String]::Copy(%(Identity))).StartsWith($(MSBuildThisProjectDirectory))' != 'true'">
        <RelativePath>$([MSBuild]::MakeRelative('$(MSBuildProjectDirectory)', '$([MSBuild]::NormalizePath('$([System.Text.RegularExpressions.Regex]::Replace('%(RelativePath)','^wwwroot\\?\/?(.*)','$(BlazorPublishDistDir)$1'))'))'))</RelativePath>
      </_StandaloneExternalPublishStaticWebAsset>

      <_CurrentProjectWwwrootStaticWebAsset Include="@(StaticWebAsset)" Exclude="@(BlazorOutputWithTargetPath->'$(TargetDir)%(TargetOutputPath)')" Condition="'%(StaticWebAsset.SourceType)' == ''" />

      <_StandaloneWwwrootCurrentProjectPublishStaticWebAsset Include="%(_CurrentProjectWwwrootStaticWebAsset.Identity)">
        <RelativePath>$(BlazorPublishDistDir)%(RelativePath)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </_StandaloneWwwrootCurrentProjectPublishStaticWebAsset>

      <!-- Update doesn't work inside targets so we need to remove the items and re-add them. See https://github.com/microsoft/msbuild/issues/2835 for details -->
      <ResolvedFileToPublish Remove="@(_ExternalPublishStaticWebAsset)" />
      <ResolvedFileToPublish Include="@(_StandaloneExternalPublishStaticWebAsset)" />

      <!-- Gets rid of the content and sets it up on the right path -->
      <ResolvedFileToPublish Remove="@(_CurrentProjectWwwrootStaticWebAsset)" />
      <ResolvedFileToPublish Include="@(_StandaloneWwwrootCurrentProjectPublishStaticWebAsset)" />

      <!-- Makes sure the generated static web assets for this project are copied to the expected output folder -->
      <ResolvedFileToPublish Include="@(StaticWebAsset)" Exclude="@(_CurrentProjectWwwrootStaticWebAsset)" Condition="'@(SourceType)' == ''">
        <RelativePath>$(BlazorPublishDistDir)%(RelativePath)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>

    </ItemGroup>
  </Target>
</Project>
